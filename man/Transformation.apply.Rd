% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apply.R
\name{Transformation.apply}
\alias{Transformation.apply}
\title{Apply a \code{\link{Transformation}} to a Data Vector and (Normalize the Result if Wanted)}
\usage{
Transformation.apply(data, transformation, normalize = TRUE,
  negateNormalization = FALSE)
}
\arguments{
\item{data}{the data vector to normalize}

\item{transformation}{the transformation to be applied first}

\item{normalize}{normalize the result (and modify the transformation
accordingly)? ... \code{TRUE} by default}

\item{negateNormalization}{if \code{normalize} is \code{TRUE}, this parameter
decides whether the maximum transformed value should be mapped to \code{1}
(\code{negateNormalization==FALSE}) or to \code{0}
(\code{negateNormalization==TRUE})}
}
\value{
the corresponding \code{\link{TransformedData}} instance
}
\description{
We transform a vector \code{data} using a given
\code{\link{Transformation}}, i.e., create a \code{\link{TransformedData}}
object where all elements are the result of the \code{Transformation@forward}
function. If the parameter \code{normalize} is set to \code{TRUE}, which it
is by default, the transformed data will further be normalized and the
\code{transformation} is adapted accordingly. In this case, it is ensured
that all elements of the produced \code{TransformedData@data} vector will be
in \code{[0, 1]}. If the transformation fails, i.e., produces non-finite,
\code{NaN}, or \code{NA} values, \code{NULL} is returned.
}
\examples{
trafo <- Transformation.new(function(x) x*x, sqrt)
data <- c(1, 2, 3, 4)
Transformation.apply(data, trafo, normalize=FALSE)
# An object of class "TransformedData"
# Slot "transformation":
# An object of class "Transformation"
# Slot "forward":
# function (x)
# x * x
#
# Slot "backward":
# function (x)  .Primitive("sqrt")
#
# Slot "data":
# [1]  1  4  9 16
Transformation.apply(data, trafo, normalize=TRUE)
# An object of class "TransformedData"
# Slot "transformation":
# An object of class "Transformation"
# Slot "forward":
# function (x)
# ((x * x - 1)/15)
# <environment: 0x42a5ee8>
#
# Slot "backward":
# function (x)
# sqrt(x = (x * 15) + 1)
# <environment: 0x4085558>
#
#
# Slot "data":
# [1] 0.0000000 0.2000000 0.5333333 1.0000000
}
